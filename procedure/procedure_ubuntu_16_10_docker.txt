# Ubuntu 16.10 and Docker

#*******************************************************************************************************************
# Web Camera (Audio)
#*******************************************************************************************************************
# 環境により異なる．
# cat /proc/asound/modules にて事前に確認する．

# ASUS Z170I PRO GAMING の場合
# cat /proc/asound/modules
#  0 snd_hda_intel
#  1 snd_usb_audio
sudo touch /etc/modprobe.d/alsa-base.conf
sudo sh -c "echo 'options snd slots=snd_usb_audio,snd_hda_intel' >> /etc/modprobe.d/alsa-base.conf"
sudo sh -c "echo 'options snd_usb_audio index=0' >> /etc/modprobe.d/alsa-base.conf"
sudo sh -c "echo 'options snd_hda_intel index=1' >> /etc/modprobe.d/alsa-base.conf"
sudo gpasswd -a $USER audio

# ASUS B85M-E の場合
#sudo sh -c "echo 'options snd slots=snd_usb_audio,snd_hda_intel,snd_hda_intel' >> /etc/modprobe.d/alsa-base.conf"
#sudo sh -c "echo 'options snd_usb_audio index=0' >> /etc/modprobe.d/alsa-base.conf"
#sudo sh -c "echo 'options snd_hda_intel index=1' >> /etc/modprobe.d/alsa-base.conf"
#sudo sh -c "echo 'options snd_hda_intel index=2' >> /etc/modprobe.d/alsa-base.conf"

#*******************************************************************************************************************
# PT3
#*******************************************************************************************************************
sudo sh -c "echo '' >> /etc/modprobe.d/blacklist.conf"
sudo sh -c "echo 'blacklist earth-pt3' >> /etc/modprobe.d/blacklist.conf"
sudo gpasswd -a $USER video

sudo reboot

#*******************************************************************************************************************
# Package
#*******************************************************************************************************************
sudo apt-get update
sudo apt-get -y upgrade
sudo apt-get -y dist-upgrade

sudo reboot

#*******************************************************************************************************************
# Package
#*******************************************************************************************************************
sudo apt-get -y install build-essential pcscd git

#*******************************************************************************************************************
# Ja
#*******************************************************************************************************************
sudo apt-get -y install language-pack-ja-base

#*******************************************************************************************************************
# PT3 driver
#*******************************************************************************************************************
cd /tmp && \
    git clone https://github.com/m-tsudo/pt3.git && \
    cd pt3 && \
    make && \
    sudo make install && \
    sudo modprobe pt3_drv

#*******************************************************************************************************************
# Docker
#*******************************************************************************************************************
curl -fsSL https://apt.dockerproject.org/gpg | sudo apt-key add -
sudo add-apt-repository "deb https://apt.dockerproject.org/repo/ ubuntu-$(lsb_release -cs) main"
sudo apt-get update
sudo apt-get -y install docker-engine
sudo usermod -aG docker $USER
sudo systemctl enable docker

#*******************************************************************************************************************
# Java 8
#*******************************************************************************************************************
sudo apt-get -y install python-software-properties software-properties-common
sudo sh -c "echo 'oracle-java8-installer shared/accepted-oracle-license-v1-1 select true' | debconf-set-selections"
sudo add-apt-repository -y ppa:webupd8team/java
sudo apt-get update
sudo apt-get -y install oracle-java8-installer
#sudo apt-get -y install oracle-java8-set-default

#*******************************************************************************************************************
# 環境が整ったところでいったん reboot
#*******************************************************************************************************************
sudo reboot

#*******************************************************************************************************************
# chukasa
#*******************************************************************************************************************
sudo mkdir /opt/chukasa
sudo chown $USER:$USER /opt/chukasa
mkdir /opt/chukasa/video

# clone project and edit configuration file
cd /tmp
git clone https://github.com/hirooka/chukasa.git
cd chukasa
sed -i -e "s/system.quick-sync-video-enabled=true/system.quick-sync-video-enabled=false/g" src/main/resources/application.properties
sed -i -e "s/spring.data.mongodb.host=localhost/spring.data.mongodb.host=mongo/g" src/main/resources/application.properties

# build chukasa application
./gradlew build

# build chukasa Docker image
docker build -t hirooka/chukasa:0.0.1-SNAPSHOT .
# or pull Docker image
# docker pull hirooka/chukasa:0.0.1-SNAPSHOT

# push if needed
# docker push hirooka/chukasa:0.0.1-SNAPSHOT

# pull and run MongoDB Docker image
docker pull mongo
docker run --name some-mongo -d mongo

# run chukasa Docker image with MongoDB Docker image
docker run --link some-mongo:mongo --privileged --volume /dev/:/dev/ --volume /var/run/pcscd/pcscd.comm:/var/run/pcscd/pcscd.comm -v /opt/chukasa/video:/opt/chukasa/video -p 80:80 -v /etc/localtime:/etc/localtime:ro -it hirooka/chukasa:0.0.1-SNAPSHOT /bin/bash

#*******************************************************************************************************************
# End Of File
#*******************************************************************************************************************