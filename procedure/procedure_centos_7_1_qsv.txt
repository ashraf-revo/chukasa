# CentOS 7.1 with QSV

#*******************************************************************************************************************
# Intel Media Server Studio 2016 for Linux - Community Edition
#*******************************************************************************************************************
# Download MediaServerStudioEssentials2016.tar.gz via Intel Developer Zone (https://software.intel.com/en-us/intel-media-server-studio)
sudo usermod -a -G video $USER
sudo yum -y groupinstall "Development Tools"
sudo yum -y install pciutils net-tools autoconf automake cmake freetype-devel gcc gcc-c++ git libtool make mercurial nasm pkgconfig zlib-devel mesa-dri-drivers wget bc
tar zxvf MediaServerStudioEssentials2016.tar.gz
cd MediaServerStudioEssentials2016
tar zxvf SDK2016Production16.4.4.tar.gz
cd SDK2016Production16.4.4
cd CentOS
tar zxvf install_scripts_centos_16.4.4-47109.tar.gz
sudo ./install_sdk_UMD_CentOS.sh
sudo mkdir /MSS
sudo chown $USER:$USER /MSS
cp build_kernel_rpm_CentOS.sh /MSS
cd /MSS
./build_kernel_rpm*.sh
cd /MSS/rpmbuild/RPMS/x86_64
sudo rpm -Uvh kernel-3.10.*.rpm
sudo reboot

#*******************************************************************************************************************
# Web Camera (Audio)
#*******************************************************************************************************************
# 環境により異なる．
# cat /proc/asound/modules にて事前に確認する．
sudo yum -y install alsa-lib-devel alsa-lib alsa-utils alsa-tools-firmware
sudo touch /etc/modprobe.d/alsa-base.conf
sudo sh -c "echo 'options snd slots=snd_usb_audio,snd_hda_intel,snd_hda_intel' >> /etc/modprobe.d/alsa-base.conf"
sudo sh -c "echo 'options snd_usb_audio index=0' >> /etc/modprobe.d/alsa-base.conf"
sudo sh -c "echo 'options snd_hda_intel index=1' >> /etc/modprobe.d/alsa-base.conf"
sudo sh -c "echo 'options snd_hda_intel index=2' >> /etc/modprobe.d/alsa-base.conf"
sudo gpasswd -a $USER audio

#*******************************************************************************************************************
# PT3
#*******************************************************************************************************************
sudo sh -c "echo '' >> /etc/modprobe.d/blacklist.conf"
sudo sh -c "echo 'blacklist earth-pt3' >> /etc/modprobe.d/blacklist.conf"
sudo gpasswd -a $USER video

sudo reboot

#*******************************************************************************************************************
# Lib
#*******************************************************************************************************************
sudo touch /etc/ld.so.conf.d/local.conf
sudo sh -c "echo '/usr/local/lib' >> /etc/ld.so.conf.d/local.conf"

#*******************************************************************************************************************
# libmfx
#*******************************************************************************************************************
sudo mkdir /opt/intel/mediasdk/include/mfx
sudo cp /opt/intel/mediasdk/include/*.h /opt/intel/mediasdk/include/mfx
sudo touch /usr/lib64/pkgconfig/libmfx.pc
sudo sh -c "echo 'prefix=/opt/intel/mediasdk' >> /usr/lib64/pkgconfig/libmfx.pc"
sudo sh -c "echo 'exec_prefix=\${prefix}' >> /usr/lib64/pkgconfig/libmfx.pc"
sudo sh -c "echo 'libdir=\${prefix}/lib/lin_x64' >> /usr/lib64/pkgconfig/libmfx.pc"
sudo sh -c "echo 'includedir=\${prefix}/include' >> /usr/lib64/pkgconfig/libmfx.pc"
sudo sh -c "echo '' >> /usr/lib64/pkgconfig/libmfx.pc"
sudo sh -c "echo 'Name: libmfx' >> /usr/lib64/pkgconfig/libmfx.pc"
sudo sh -c "echo 'Description: Intel Media SDK' >> /usr/lib64/pkgconfig/libmfx.pc"
sudo sh -c "echo 'Version: 16.4.2' >> /usr/lib64/pkgconfig/libmfx.pc"
sudo sh -c "echo 'Libs: -L\${libdir} -lmfx -lva -lstdc++ -ldl -lva-drm -ldrm' >> /usr/lib64/pkgconfig/libmfx.pc"
sudo sh -c "echo 'Cflags: -I\${includedir} -I/usr/include/libdrm' >> /usr/lib64/pkgconfig/libmfx.pc"
# use "centos/usr/lib64/pkgconfig/libmfx.pc"
# sudo cp centos/usr/lib64/pkgconfig/libmfx.pc /usr/lib64/pkgconfig/

#*******************************************************************************************************************
# FFmpeg
#*******************************************************************************************************************
cd /tmp && \
    wget https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2 && \
    tar jxvf ffmpeg-snapshot.tar.bz2 && \
    cd ffmpeg && \
    ./configure --enable-libmfx && \
    make -j8 && \
    sudo make install && \
    sudo ldconfig

#*******************************************************************************************************************
# Fix link
#*******************************************************************************************************************
sudo unlink /lib/modules/3.10.0-229.1.2.47109.MSSr1.el7.centos.x86_64/source
sudo unlink /lib/modules/3.10.0-229.1.2.47109.MSSr1.el7.centos.x86_64/build
sudo ln -s /lib/modules/3.10.0-229.1.2.47109.MSSr1.el7.centos.x86_64/build  /lib/modules/3.10.0-229.1.2.47109.MSSr1.el7.centos.x86_64/source
sudo ln -s /usr/src/kernels/3.10.0-327.13.1.el7.x86_64/ /lib/modules/3.10.0-229.1.2.47109.MSSr1.el7.centos.x86_64/build

#*******************************************************************************************************************
# PT3 driver
#*******************************************************************************************************************
cd /tmp && \
    git clone https://github.com/m-tsudo/pt3.git && \
    cd pt3 && \
    make && \
    sudo make install && \
    sudo modprobe pt3_drv

#*******************************************************************************************************************
# recpt1
#*******************************************************************************************************************
cd /tmp && \
    wget http://hg.honeyplanet.jp/pt1/archive/ec7c87854f2f.tar.bz2 && \
    tar xvlf ec7c87854f2f.tar.bz2 && \
    cd pt1-ec7c87854f2f/arib25 && \
    make && \
    sudo make install && \
    sudo ldconfig

cd /tmp && \
    git clone https://github.com/stz2012/recpt1.git && \
    cd recpt1/recpt1 && \
    ./autogen.sh && \
    ./configure --enable-b25 && \
    make && \
    sudo make install && \
    sudo ldconfig

#*******************************************************************************************************************
# epgdump
#*******************************************************************************************************************
cd /tmp && \
    git clone https://github.com/Piro77/epgdump.git && \
    cd epgdump && \
    ./autogen.sh && \
    make && \
    sudo make install && \
    sudo ldconfig

#*******************************************************************************************************************
# MongoDB 3.2
#*******************************************************************************************************************
sudo setenforce 0
sudo sed -i -e "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config
sudo touch /etc/yum.repos.d/mongodb-org-3.2.repo
sudo sh -c "echo '[mongodb-org-3.2]' >> /etc/yum.repos.d/mongodb-org-3.2.repo"
sudo sh -c "echo 'name=MongoDB Repository' >> /etc/yum.repos.d/mongodb-org-3.2.repo"
sudo sh -c "echo 'baseurl=https://repo.mongodb.org/yum/redhat/\$releasever/mongodb-org/3.2/x86_64/' >> /etc/yum.repos.d/mongodb-org-3.2.repo"
sudo sh -c "echo 'gpgcheck=1' >> /etc/yum.repos.d/mongodb-org-3.2.repo"
sudo sh -c "echo 'enabled=1' >> /etc/yum.repos.d/mongodb-org-3.2.repo"
sudo sh -c "echo 'gpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc' >> /etc/yum.repos.d/mongodb-org-3.2.repo"
sudo yum install -y mongodb-org

#*******************************************************************************************************************
# nginx
#*******************************************************************************************************************
cd /tmp && \
    sudo yum -y install pcre-devel openssl-devel && \
    wget http://nginx.org/download/nginx-1.11.1.tar.gz && \
    tar zxvf nginx-1.11.1.tar.gz && \
    cd nginx-1.11.1 && \
    ./configure --with-http_ssl_module --with-ipv6 --with-http_v2_module && \
    make -j8 && \
    sudo make install

#*******************************************************************************************************************
# Java 8
#*******************************************************************************************************************
wget --no-cookies --no-check-certificate --header "Cookie: oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u92-b14/jdk-8u92-linux-x64.rpm"
sudo yum -y install jdk-8u92-linux-x64.rpm
sudo sh -c "echo 'export JAVA_HOME=/usr/java/default' >> /etc/profile.d/jdk.sh"
sudo sh -c "echo 'export PATH=\$JAVA_HOME/bin:\$PATH' >> /etc/profile.d/jdk.sh"
source /etc/profile.d/jdk.sh

#*******************************************************************************************************************
# chukasa
#*******************************************************************************************************************
sudo mkdir /opt/chukasa
sudo chown $USER:$USER /opt/chukasa
mkdir /opt/chukasa/video

# clone project and edit configuration file
cd /tmp
git clone https://github.com/hirooka/chukasa.git
cd chukasa

# build chukasa application and deploy it
./gradlew build
cp build/libs/chukasa-0.0.1-SNAPSHOT.jar /opt/chukasa/

# chukasa sysconfig
sudo cp centos/etc/sysconfig/chukasa /etc/sysconfig/
# or
# sudo touch /etc/sysconfig/chukasa
# sudo sh -c "echo 'JAVA_HOME=\"/usr/java/default\"' >> /etc/sysconfig/chukasa"
# sudo sh -c "echo 'LIBVA_DRIVER_NAME=\"iHD\"' >> /etc/sysconfig/chukasa"
# sudo sh -c "echo 'MFX_HOME=\"/opt/intel/mediasdk\"' >> /etc/sysconfig/chukasa"
# sudo sh -c "echo 'LIBVA_DRIVERS_PATH=\"/opt/intel/mediasdk/lib64\"' >> /etc/sysconfig/chukasa"

#　chukasa
sed -i -e "s/User=hirooka/User=$USER/g" ubuntu/systemd/chukasa.service
sudo cp centos/systemd/chukasa.service /etc/systemd/system/
sudo systemctl enable chukasa

#　nginx
sudo cp ubuntu/nginx/nginx.conf /usr/local/nginx/conf/nginx.conf
sudo cp ubuntu/systemd/nginx.service /etc/systemd/system/
sudo systemctl enable nginx

sudo firewall-cmd --zone=public --add-port=80/tcp --permanent
sudo firewall-cmd --reload

sudo reboot

#*******************************************************************************************************************
# End Of File
#*******************************************************************************************************************